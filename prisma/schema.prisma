//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

enum UserRole {
  USER
  ADMIN
  BUYERS_AGENT
}

/// @@allow('all', true)
model BrokerageDetails {
  id        String         @id() @default(uuid())
  name      String
  address   String
  logo      String?
  website   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt()
  agents    AgentProfile[] @relation("brokerage")
}

/// @@allow('all', true)
model AgentProfile {
  id              String           @id() @default(uuid())
  userId          String           @unique()
  user            User             @relation(fields: [userId], references: [id])
  licenseNumber   String
  licenseVerified Boolean          @default(false)
  brokerageId     String
  brokerage       BrokerageDetails @relation(fields: [brokerageId], references: [id], name: "brokerage")
  teamAffiliation String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt()
}

/// @@allow('all', true)
model BuyerPreferences {
  id         String    @id() @default(uuid())
  clientId   String
  client     Client    @relation(fields: [clientId], references: [id])
  bedrooms   Int?
  bathrooms  Int?
  priceMin   Float?
  priceMax   Float?
  location   String?
  moveInDate DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PropertyRecommendation {
  id         String   @id() @default(uuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id])
  agentId    String
  agent      User     @relation(fields: [agentId], references: [id])
  note       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SavedSearch {
  id        String   @id() @default(uuid())
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id])
  criteria  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model FavoriteListing {
  id         String   @id() @default(uuid())
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id])
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model OfferTemplate {
  id             String       @id() @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  name           String
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TransactionFee {
  id            String      @id() @default(uuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  amount        Float
  status        String
  paidBy        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt()
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                      String                   @id() @default(uuid())
  name                    String?
  email                   String?                  @unique()
  pictureUrl              String?                  @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation         String?
  stripeCustomerId        String?
  status                  UserStatus               @default(VERIFIED)
  role                    UserRole                 @default(USER)
  globalRole              String                   @default("USER")
  /// @password
  /// @omit
  password                String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now()) @updatedAt()
  organizationRoles       OrganizationRole[]
  agentProfile            AgentProfile?
  recommendations         PropertyRecommendation[]
  clients                 Client[]                 @relation("agent")
  pwaSubscriptions        PwaSubscription[]        @relation("user")
  transactionParticipants TransactionParticipant[] @relation("user")
  addresses               Address[]
}

/// @@allow('all', true)
model Property {
  id              String                   @id() @default(uuid())
  address         String
  price           String?
  type            String?
  status          String?
  mlsId           String?
  specifications  Json?
  description     String?
  organizationId  String
  organization    Organization?            @relation(fields: [organizationId], references: [id], name: "organization")
  transactions    Transaction[]            @relation("property")
  documents       Document[]               @relation("property")
  appointments    Appointment[]            @relation("property")
  recommendations PropertyRecommendation[]
  favorites       FavoriteListing[]
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Client {
  id                String                   @id() @default(uuid())
  name              String
  email             String?
  phone             String?
  type              String?
  preferences       Json?
  preApprovalStatus String?
  organizationId    String
  organization      Organization?            @relation(fields: [organizationId], references: [id], name: "organization")
  agentId           String?
  agent             User?                    @relation(fields: [agentId], references: [id], name: "agent")
  buyerPreferences  BuyerPreferences[]
  recommendations   PropertyRecommendation[]
  savedSearches     SavedSearch[]
  favoriteListing   FavoriteListing[]
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Transaction {
  id                      String                   @id() @default(uuid())
  status                  String?
  type                    String?
  price                   String?
  closingDate             String?
  fee                     Float?
  organizationId          String
  organization            Organization?            @relation(fields: [organizationId], references: [id], name: "organization")
  propertyId              String
  property                Property?                @relation(fields: [propertyId], references: [id], name: "property")
  transactionParticipants TransactionParticipant[] @relation("transaction")
  documents               Document[]               @relation("transaction")
  appointments            Appointment[]            @relation("transaction")
  fees                    TransactionFee[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TransactionParticipant {
  id            String       @id() @default(uuid())
  role          String?
  transactionId String
  transaction   Transaction? @relation(fields: [transactionId], references: [id], name: "transaction")
  userId        String
  user          User?        @relation(fields: [userId], references: [id], name: "user")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Document {
  id            String       @id() @default(uuid())
  name          String
  type          String?
  url           String
  permissions   Json?
  propertyId    String?
  property      Property?    @relation(fields: [propertyId], references: [id], name: "property")
  transactionId String?
  transaction   Transaction? @relation(fields: [transactionId], references: [id], name: "transaction")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Appointment {
  id             String        @id() @default(uuid())
  type           String?
  startTime      String
  endTime        String
  status         String?
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  propertyId     String?
  property       Property?     @relation(fields: [propertyId], references: [id], name: "property")
  transactionId  String?
  transaction    Transaction?  @relation(fields: [transactionId], references: [id], name: "transaction")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
  propertys        Property[]         @relation("organization")
  clients          Client[]           @relation("organization")
  transactions     Transaction[]      @relation("organization")
  appointments     Appointment[]      @relation("organization")
  offerTemplates   OfferTemplate[]
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@allow('all', true)
model PwaSubscription {
  id        String   @id() @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "user")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', userId == auth().id)
/// @@allow('create', true)
model Address {
  id          String   @id() @default(uuid())
  name        String?
  line1       String?
  line2       String?
  city        String?
  region      String?
  postalCode  String?
  countryCode String?
  isDefault   Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
model AnalyticsLocalMetric {
  key           String   @id()
  countPositive Int      @default(0)
  countNegative Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt()
}
